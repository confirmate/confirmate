// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createTargetOfEvaluation = `-- name: CreateTargetOfEvaluation :exec
INSERT INTO targets_of_evaluation (
  name
) VALUES (
  $1
)
`

func (q *Queries) CreateTargetOfEvaluation(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createTargetOfEvaluation, name)
	return err
}

const deleteTargetOfEvaluation = `-- name: DeleteTargetOfEvaluation :exec
DELETE FROM targets_of_evaluation
WHERE id = $1
`

func (q *Queries) DeleteTargetOfEvaluation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTargetOfEvaluation, id)
	return err
}

const getTargetOfEvaluation = `-- name: GetTargetOfEvaluation :one
SELECT id, name FROM targets_of_evaluation
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTargetOfEvaluation(ctx context.Context, id int64) (TargetsOfEvaluation, error) {
	row := q.db.QueryRowContext(ctx, getTargetOfEvaluation, id)
	var i TargetsOfEvaluation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTargetOfEvaluation = `-- name: ListTargetOfEvaluation :many
SELECT id, name FROM targets_of_evaluation
ORDER BY name
`

func (q *Queries) ListTargetOfEvaluation(ctx context.Context) ([]TargetsOfEvaluation, error) {
	rows, err := q.db.QueryContext(ctx, listTargetOfEvaluation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TargetsOfEvaluation
	for rows.Next() {
		var i TargetsOfEvaluation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTargetOfEvaluation = `-- name: UpdateTargetOfEvaluation :exec
UPDATE targets_of_evaluation
set name = $1
WHERE id = $1
`

func (q *Queries) UpdateTargetOfEvaluation(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, updateTargetOfEvaluation, name)
	return err
}
